# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Models
    module Shared
    

      class PetInput
        extend T::Sig
        include Crystalline::MetadataFields


        field :name, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('name'), required: true } }

        field :photo_urls, Crystalline::Array.new(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('photoUrls'), required: true } }

        field :category, Crystalline::Nilable.new(Models::Shared::Category), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('category') } }

        field :tags, Crystalline::Nilable.new(Crystalline::Array.new(Models::Shared::Tag)), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('tags') } }
        # pet status in the store
        field :status, Crystalline::Nilable.new(Models::Shared::PetStatus), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('status'), 'decoder': Utils.enum_from_string(Models::Shared::PetStatus, true) } }

        sig { params(name: ::String, photo_urls: T::Array[::String], category: T.nilable(Models::Shared::Category), tags: T.nilable(T::Array[Models::Shared::Tag]), status: T.nilable(Models::Shared::PetStatus)).void }
        def initialize(name:, photo_urls:, category: nil, tags: nil, status: nil)
          @name = name
          @photo_urls = photo_urls
          @category = category
          @tags = tags
          @status = status
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @name == other.name
          return false unless @photo_urls == other.photo_urls
          return false unless @category == other.category
          return false unless @tags == other.tags
          return false unless @status == other.status
          true
        end
      end
    end
  end
end
