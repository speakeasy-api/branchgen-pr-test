# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: false
# frozen_string_literal: true

require_relative '../sdkconfiguration'

module OpenApiSDK
  module SDKHooks
    class HookContext
      

      
      attr_accessor :config

      
      attr_accessor :base_url

      
      attr_accessor :oauth2_scopes

      
      attr_accessor :operation_id

      
      attr_accessor :security_source

      
      def initialize(config:, base_url:, oauth2_scopes:, operation_id:, security_source:)
        @config = config
        @base_url = base_url
        @oauth2_scopes = oauth2_scopes
        @operation_id = operation_id
        @security_source = security_source
      end
    end

    class BeforeRequestHookContext < HookContext
      

      
      def initialize(hook_ctx:)
        super(
          config: hook_ctx.config,
          base_url: hook_ctx.base_url,
          operation_id: hook_ctx.operation_id,
          oauth2_scopes: hook_ctx.oauth2_scopes,
          security_source: hook_ctx.security_source
        )
      end
    end

    class AfterSuccessHookContext < HookContext
      

      
      def initialize(hook_ctx:)
        super(
          config: hook_ctx.config,
          base_url: hook_ctx.base_url,
          operation_id: hook_ctx.operation_id,
          oauth2_scopes: hook_ctx.oauth2_scopes,
          security_source: hook_ctx.security_source
        )
      end
    end

    class AfterErrorHookContext < HookContext
      

      
      def initialize(hook_ctx:)
        super(
          config: hook_ctx.config,
          base_url: hook_ctx.base_url,
          operation_id: hook_ctx.operation_id,
          oauth2_scopes: hook_ctx.oauth2_scopes,
          security_source: hook_ctx.security_source
        )
      end
    end

    module AbstractSDKInitHook
      
      
      

      
      def sdk_init(config:)
        Kernel.raise NotImplementedError.new
      end
    end

    module AbstractBeforeRequestHook
      
      
      

      
      def before_request(hook_ctx:, request:)
        Kernel.raise NotImplementedError.new
      end
    end

    module AbstractAfterSuccessHook
      
      
      

      
      def after_success(hook_ctx:, response:)
        Kernel.raise NotImplementedError.new
      end
    end

    module AbstractAfterErrorHook
      
      
      

      
      def after_error(error:, hook_ctx:, response:)
        Kernel.raise NotImplementedError.new
      end
    end

    class AbstractSDKHook
      include AbstractSDKInitHook
      include AbstractBeforeRequestHook
      include AbstractAfterSuccessHook
      include AbstractAfterErrorHook
    end
  end
end
