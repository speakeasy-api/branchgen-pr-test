# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: false
# frozen_string_literal: true

require 'cgi'
require 'date'
require 'base64'


module OpenApiSDK
  module Utils
    

    
    def self.get_query_params(clazz, query_params, url_override = nil, gbls = nil)
      parsed_params = {}
      if !url_override.nil?
        parsed_url = URI.parse url_override
        parsed_params = CGI.parse parsed_url.query
      end
      params = {}
      clazz.fields.each do |f|
        request_metadata = f.metadata[:request]
        next if !request_metadata.nil?

        metadata = f.metadata[:query_param]
        next if metadata.nil?

        param_name = f.name
        value = query_params&.send(param_name.to_sym)
        value = _populate_from_globals(param_name, value, 'queryParam', gbls)

        f_name = metadata[:field_name]
        serialization = metadata.fetch(:serialization, '')
        if serialization != ''
          params = params.merge _get_serialized_params(
            metadata, f_name, value
          )
        else
          style = metadata.fetch(:style, 'form')
          case style
          when 'deepObject'
            params = params.merge _get_deep_object_query_params(
              metadata, f_name, value
            )
          when 'form'
            params = params.merge _get_delimited_query_params(
              metadata, f_name, value, ','
            )
          when 'pipeDelimited'
            params = params.merge _get_delimited_query_params(
              metadata, f_name, value, '|'
            )
          else
            raise StandardError, 'not yet implemented'
          end
        end
      end
      params.merge parsed_params
    end

    
    def self._get_deep_object_query_params(metadata, field_name, obj)
      params = {}

      return params if obj.nil?

      if obj.respond_to? :fields
        obj.fields.each do |obj_field|
          obj_param_metadata = obj_field.metadata[:query_param]
          next if obj_param_metadata.nil?

          val = obj.send(obj_field.name)
          next if val.nil?

          key = "#{metadata.fetch(:field_name, field_name)}[#{obj_param_metadata.fetch(:field_name, obj_field.name)}]"
          if val.is_a? Array
            val.each do |v|
              next if v.nil?

              params[key] = [] if !params.include? key

              params[key] << val_to_string(v)
            end
          else
            params[key] = [val_to_string(val)]
          end
        end
      elsif obj.is_a? Hash
        obj.each do |key, value|
          next if value.nil?

          param_key = "#{metadata.fetch(:field_name, field_name)}[#{key}]"
          if value.is_a? Array
            value.each do |val|
              next if val.nil?

              params[param_key] = [] if !params.include? param_key

              params[param_key].append(val_to_string(val))
            end
          else
            params[param_key] = [val_to_string(value)]
          end
        end
      end
      params
    end


    
    def self._get_delimited_query_params(metadata, field_name, obj, delimiter)
      get_query_param_field_name = lambda do |obj_field|
        obj_param_metadata = obj_field.metadata[:query_param]

        return {} if obj_param_metadata.nil?

        return obj_param_metadata.fetch(:field_name, obj_field.name)
      end

      _populate_form(field_name, metadata.fetch(:explode, true), obj, delimiter, &get_query_param_field_name)
    end
  end
end
